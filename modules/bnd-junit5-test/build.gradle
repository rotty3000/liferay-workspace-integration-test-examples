import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

buildscript {
	repositories {
		mavenLocal() // This is only used for snapshots of bnd libs
		mavenCentral() // This is only used for more recent bnd libs
	}
	dependencies {
		classpath group: "biz.aQute.bnd", name: "biz.aQute.bnd.gradle", version: "5.3.0-SNAPSHOT"
	}
}

repositories {
	mavenLocal() // This is only used for snapshots of bnd libs
}

configurations {
	testIntegrationCompileOnly.extendsFrom compileOnly
}

dependencies {
	// _testModules_ are deployed to Liferay as part of setting up the testing infrastructure, communications and test
	// support
	testModules group: "biz.aQute.bnd", name: "biz.aQute.remote.agent", version: "5.3.0-SNAPSHOT", transitive: false

	// use _testIntegrationCompileOnly_ configuration for dependencies which are effectively _provided_ by the portal
	testIntegrationCompileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel"
	testIntegrationCompileOnly group: "org.osgi", name: "org.osgi.core"

	// use _testIntegrationCompile_ for dependencies which are required at compile time AND must be deployed at runtime
	testIntegrationCompile group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.7.0"
	testIntegrationCompile group: "org.osgi", name: "org.osgi.test.assertj.framework", version: "0.10.0"
	testIntegrationCompile group: "org.osgi", name: "org.osgi.test.junit5", version: "0.10.0"

	// use _testIntegrationRuntimeOnly_ for dependencies which are required only at runtime (typically identified during
	// resolve)
	testIntegrationRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-params", version: "5.7.0"
	testIntegrationRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.7.0"
	testIntegrationRuntimeOnly group: "org.junit.platform", name: "junit-platform-engine", version: "1.7.0"
	testIntegrationRuntimeOnly group: "org.junit.platform", name: "junit-platform-launcher", version: "1.7.0"
	testIntegrationRuntimeOnly group: "org.junit.platform", name: "junit-platform-commons", version: "1.7.0"
}

// obtain the _targetPlatformDistro_ file for the specified version of Liferay. this is used to resolve modules against
// the portal's capabilities
ext.targetPlatformDistro = "${rootProject.configurations.targetPlatformDistro.singleFile.absolutePath};version=file"

// reconfigure the _jar_ task
tasks.named('jar') {
	// since the _jar_ task is a bnd _Bundle_ task, reconfigure it with the correct classpath so that proper OSGi
	// metadata analysis can occur on all classes
	classpath sourceSets.testIntegration.compileClasspath

	// since this project contains test classes make sure to include the compiled output
	from sourceSets.testIntegration.output
}

// the _resolve_ task calculates the set of deployment dependencies required by the test bundle. it also helps determine
// if dependencies are correctly declared and that requirements are satisfied and will not fail at runtime. the
// calculated result is written to the _-runbundles_ property of the _bnd.bndrun_ file (this file may occasionally need
// to be checked into source control to account for changes in the calculated result)
tasks.register('resolve', Resolve) {
	// make it depend on the _jar_ task because the built artifact is required
	dependsOn tasks.named('jar')

	// the _bndrun_ configures the details used to calculate the set of runtime bundles needed to execute the tests
	bndrun 'bnd.bndrun'

	// include all OSGi bundles from _targetPlatformDistro_ and _runtimeClasspath_ to the set of bundles against which
	// the resolve operation is performed and from which deployment dependencies are drawn
	bundles += [
		rootProject.configurations.targetPlatformDistro,
		sourceSets.testIntegration.runtimeClasspath
	]
}

// register a _TestOSGi_ task to execute the tests within Liferay
tasks.register('testOSGi', TestOSGi) {
	// make it depend on _testIntegration_ task so that the runtime test environment starts up
	dependsOn tasks.named('testIntegration')

	// the _bndrun_ configures how to connect and execute tests in the running test environment
	bndrun 'bnd.bndrun'

	// include all OSGi bundles from _targetPlatformDistro_ and _runtimeClasspath_ to the set of bundles against which
	// deployment dependencies are drawn
	bundles += [
		rootProject.configurations.targetPlatformDistro,
		sourceSets.testIntegration.runtimeClasspath
	]
}

// reconfigure the _testIntegration_ task and replace it's function with that of the bnd _TestOSGi_ plugin
tasks.named('testIntegration') {
	// make it depend on _resolve_ to ensure that all metadata and runtime calculations are correct
	dependsOn tasks.named('resolve')

	// since the standard workspace integration test framework is not being used (it's awkward to work with), disable
	// its actions. the task is retained as the entry point to preserve it's effect of causing the runtime test
	// environment to start up and then shutdown on completion of all tests.
	actions = []

	// finally execute the _testOSGi_ task
	finalizedBy tasks.named('testOSGi')
}

// OPTIONAL: configure the test environment to start in debug mode (default port 8000)
startTestableTomcat {
	executableArgs = ["jpda", "run"]
}

eclipse {
	classpath {
		plusConfigurations += [ configurations.testIntegrationCompileOnly ]
	}
}
